cmake_minimum_required(VERSION 2.4)
project (MMseqs)
set(sampleName MMseqs)
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
SET(HAVE_MPI 0 CACHE BOOL "Have MPI")
SET(HAVE_SSE4_2 0 CACHE BOOL "Have SSE4.2")
SET(HAVE_AVX2 0 CACHE BOOL "Have AVX2")
set(MMSEQS_DIR ${PROJECT_SOURCE_DIR})
set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${PROJECT_SOURCE_DIR}/lib)
set(CMAKE_VERBOSE_MAKEFILE ON)
message("-- Sourcedir ${CMAKE_CURRENT_SOURCE_DIR}")
message("-- Projjectdir ${PROJECT_SOURCE_DIR}")
# find compiler
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  # using Clang
  message("-- Compilter is clang(++)")
  set(CMAKE_COMPILER_IS_CLANG 1)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # using GCC
  message("-- Compilter is GNU ")
  set(CMAKE_COMPILER_IS_GNUCXX 1)
  set(CMAKE_COMPILER_IS_GNUCCC 1)
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.6.0")
      message(FATAL_ERROR "Insufficient gcc version")
  endif()

elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  # using Intel C++
  set(CMAKE_COMPILER_IS_ICC 1)
endif()

#set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COMPILE_FLAGS}‚Äù )
add_subdirectory(lib/ffindex)
include_directories(src/commons)
include_directories(src/prefiltering)
include_directories(src/alignment)
include_directories(src/clustering)
include_directories(src/util)
include_directories(lib/getoptpp)
include_directories(lib/kseq)
include_directories(lib/simd)
include_directories(lib/seqan)
include_directories(${PROJECT_SOURCE_DIR}/lib/ffindex/src)
add_subdirectory(src)

